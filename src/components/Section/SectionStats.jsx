import React from 'react';
import PropTypes from 'prop-types';

import { Row, Col, Container } from 'react-bootstrap';

import IconBurned from '../../assets/icon-burned.svg';
import IconSupply from '../../assets/icon-supply.svg';
import IconFloor from '../../assets/icon-floor.svg';
import IconPrice from '../../assets/icon-price.svg';

import Bigstat from '../Bigstat';
import { fromWei } from '../../lib/utils';

class SectionStats extends React.Component {
	constructor(props) {
		super(props);
		this.state = {
			priceKey: null,
			floorKey: null,
			totalBurnedKey: null,
			supplyKey: null,
		};
	}

	componentDidMount() {
		const { drizzle } = this.props;
		const { ViewContribute } = drizzle.contracts;

		this.setState({
			priceKey: ViewContribute.methods.price.cacheCall(),
			floorKey: ViewContribute.methods.floor.cacheCall(),
			totalBurnedKey: ViewContribute.methods.totalBurned.cacheCall(),
			supplyKey: ViewContribute.methods.supply.cacheCall(),
		});
	}

	render() {
		const { props, state } = this;
		const { ViewContribute } = props.drizzleState.contracts;
		const price = ViewContribute.price[state.priceKey];
		const floor = ViewContribute.floor[state.floorKey];
		const totalBurned = ViewContribute.totalBurned[state.totalBurnedKey];
		const supply = ViewContribute.supply[state.supplyKey];

		return (
			<section className="section-stats text-light">
				<Container>
					<h2 className="font-weight-light mb-5 text-center">Token Stats</h2>
					<Row>
						<Col md="6" className="pb-4">
							<Bigstat label="Price" value={price && fromWei(price.value)} image={IconPrice}>
								TRIB gets more expensive as the supply increases and cheaper as supply decreases.
								{' '}
								<strong>The contract provides infinite liquidity</strong>
								{' '}
								to users.
							</Bigstat>
						</Col>
						<Col md="6" className="pb-4">
							<Bigstat label="Floor" value={floor && fromWei(floor.value)} image={IconFloor}>
								Burned tokens can’t be sold back to the contract. This effectively creates a price floor
								{' '}
								<strong>which is constantly being raised</strong>
								{' '}
								every time tokens get burned.
							</Bigstat>
						</Col>
					</Row>
					<Row>
						<Col md="6" className="pb-4">
							<Bigstat label="Burned" value={totalBurned && fromWei(totalBurned.value)} image={IconBurned}>
								Tokens are burned from the interest that is generated by the pool. Everytime TRIB is
								burned
								the price floor is increased.
								{' '}
								<strong>TRIB’s price cannot go below the floor</strong>
								.
							</Bigstat>
						</Col>
						<Col md="6" className="pb-4">
							<Bigstat label="Supply" value={supply && fromWei(supply.value, 0)} image={IconSupply} unit="TRIB">
								A higher supply means more DAI generating interest for the system.
								The interest is used to mint and burn TRIB tokens,
								{' '}
								<strong>increasing its price</strong>
								.
							</Bigstat>
						</Col>
					</Row>
				</Container>
			</section>
		);
	}
}

SectionStats.propTypes = {
	drizzle: PropTypes.shape({
		contracts: PropTypes.shape({
			Contribute: PropTypes.object,
			ViewContribute: PropTypes.object,
		}),
		web3: PropTypes.object,
	}),
	drizzleState: PropTypes.shape({
		contracts: PropTypes.shape({
			Contribute: PropTypes.object,
			ViewContribute: PropTypes.object,
		}),
	}),
};

SectionStats.defaultProps = {
	drizzle: null,
	drizzleState: null,
};

export default SectionStats;
